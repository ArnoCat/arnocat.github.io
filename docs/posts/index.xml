<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archives on Arno</title>
    <link>https://arnocat.github.io/posts/</link>
    <description>Recent content in Archives on Arno</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 02 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://arnocat.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go-env</title>
      <link>https://arnocat.github.io/posts/go/go-env/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-env/</guid>
      <description>Go env $ go env # 编译内核 GOARCH=&amp;#39;arm64&amp;#39; # 文件库设置 # 当CGO_ENABLED=1， 进行编译时， 会将文件中引用libc的库（比如常用的net包），以动态链接的</description>
    </item>
    <item>
      <title>docker常用命令</title>
      <link>https://arnocat.github.io/posts/docker/docker-command/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/docker/docker-command/</guid>
      <description>docker常用命令 # docker拉取镜像 $ docker pull xxx # docker 查看镜像 $ docker images # 查找镜像 $ docker search xxx # 删除镜像 $ docker rmi xxx # 查看我们正在运行的容器 $ docker ps # 查看</description>
    </item>
    <item>
      <title>docker网络异常排查</title>
      <link>https://arnocat.github.io/posts/docker/docker-network/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/docker/docker-network/</guid>
      <description>docker网络异常排查 $ docker pull ubuntu:22.04 Error response from daemon: Get &amp;#34;https://registry-1.docker.io/v2/&amp;#34;: EOF 这是一个docker的网络异常,需要检查一下网络是否正常 先用ping检测一下 $ ping registry-1.docker.io # 测试网络可</description>
    </item>
    <item>
      <title>go-grpc</title>
      <link>https://arnocat.github.io/posts/go/go-grpc/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-grpc/</guid>
      <description>Go 每日一库之 grpc</description>
    </item>
    <item>
      <title>go-并发</title>
      <link>https://arnocat.github.io/posts/go/go-sync/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-sync/</guid>
      <description>Go 每日一库之 go并发</description>
    </item>
    <item>
      <title>go-微服务</title>
      <link>https://arnocat.github.io/posts/go/go-%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>Go 每日一库之go微服务</description>
    </item>
    <item>
      <title>go-gin</title>
      <link>https://arnocat.github.io/posts/go/go-gin/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-gin/</guid>
      <description>Go 每日一库之 gin</description>
    </item>
    <item>
      <title>vad</title>
      <link>https://arnocat.github.io/posts/vad/vad/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/vad/vad/</guid>
      <description>VAD https://github.com/kyutai-labs/hibiki https://github.com/pirxus/personalVAD https://github.com/gkonovalov/android-vad</description>
    </item>
    <item>
      <title>zsh</title>
      <link>https://arnocat.github.io/posts/zsh/zsh/</link>
      <pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/zsh/zsh/</guid>
      <description>实用工具 iTerm2 zsh ohmyzsh 参考 https://www.poloxue.com/posts/2023-10-16-zsh-themes-and-plugins/ 安装报错 [oh-my-zsh] plugin &amp;lsquo;zsh-syntax-highlighting&amp;rsquo; not found [oh-my-zsh] plugin &amp;lsquo;zsh-autosuggestions&amp;rsquo; not found 解决 cd 到 /.oh-my-zsh/plugins 然后 git clone zsh-syntax-hightlight 在那里 并确保 .zshrc 中提到的插件 我认为 .zshrc 中提到的每个插件都必须放在这个目录中：</description>
    </item>
    <item>
      <title>restapi</title>
      <link>https://arnocat.github.io/posts/restapi/restapi/</link>
      <pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/restapi/restapi/</guid>
      <description>swagger gin stoplight 使用 安装 go get -u github.com/swaggo/swag/cmd/swag # 在macOS中安装 swag需要执行如下命令： mv $GOPATH/bin/swag /usr/local/go/bin 检测是否安装成功 swag -v swag version v1.16.3 安装gin-swagger扩展 go get -u -v github.com/swaggo/gin-swagger</description>
    </item>
    <item>
      <title>github-action</title>
      <link>https://arnocat.github.io/posts/github/github-action/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/github/github-action/</guid>
      <description>git命令 不应用当前分支的修改，单纯地切换分支 # 保存dev分支的修改到堆栈中 $ git stash # 切换master分支 $ git checkout master # 切回dev分支 $ git checkout dev # 获</description>
    </item>
    <item>
      <title>go-viper</title>
      <link>https://arnocat.github.io/posts/go/go-viper/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-viper/</guid>
      <description>Go 每日一库之 viper viper 是一个配置解决方案，拥有丰富的特性： 支持 JSON/TOML/YAML/HCL/envfile/Java properties 等多种格式的配置文件； ·可以设置监听配置文件的修改，修改时自动加载新的配置； ·从</description>
    </item>
    <item>
      <title>ssh-copy-id</title>
      <link>https://arnocat.github.io/posts/github/ssh-copy-id/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/github/ssh-copy-id/</guid>
      <description>ssh-copy-id ssh-copy-id在服务器上安装SSH 密钥作为授权密钥。其目的是提供访问权限，而无需每次登录都输入密码。这有助于使用 SSH 协议实现自动、无</description>
    </item>
    <item>
      <title>vscode实用功能</title>
      <link>https://arnocat.github.io/posts/vscode/creating-vscode/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/vscode/creating-vscode/</guid>
      <description>vscode 实用功能 vscode测试获取go的环境变量 1.创建launch.json文件 2.然后在项目目录中会自动创建.vscode的目录 3.在.vs</description>
    </item>
    <item>
      <title>GO每日一库之go基础</title>
      <link>https://arnocat.github.io/posts/go/go-base/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-base/</guid>
      <description>Go 每日一库之go基础 1. var _ Interface = (*Type)(nil) 在Go语言中，var _ Interface = (*Type)(nil) 是一种常见的惯用法，用于确保某个类型 (Type) 实现了某个接口 (Interface)。它的</description>
    </item>
    <item>
      <title>docker-proto</title>
      <link>https://arnocat.github.io/posts/docker/docker-proto-image/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/docker/docker-proto-image/</guid>
      <description>用go Makefile make -&amp;gt; docker image 生成proto （容器化用法） 为什么使用Makefile 在学习docker命令的时候，发现有人使用Makefile来存储操作，</description>
    </item>
    <item>
      <title>general-command</title>
      <link>https://arnocat.github.io/posts/linux/creating-general-command/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/linux/creating-general-command/</guid>
      <description>常用命令 git go $ go env $ env $ env | grep -i proxy GOPROXY=https://goproxy.cn,direct $ curl -I google.com HTTP/1.1 301 Moved Permanently Location: http://www.google.com/ Content-Type: text/html; charset=UTF-8 Content-Security-Policy-Report-Only: object-src &amp;#39;none&amp;#39;;base-uri &amp;#39;self&amp;#39;;script-src &amp;#39;nonce-L_UKjT9Yze3yROlGcbG9pA&amp;#39; &amp;#39;strict-dynamic&amp;#39; &amp;#39;report-sample&amp;#39; &amp;#39;unsafe-eval&amp;#39; &amp;#39;unsafe-inline&amp;#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp Date: Mon, 08 Jul 2024 09:28:33 GMT 查看端口 Linux 查看端口占用情况可以使用 lsof 和 netstat</description>
    </item>
    <item>
      <title>docker</title>
      <link>https://arnocat.github.io/posts/default/</link>
      <pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/default/</guid>
      <description>docker </description>
    </item>
    <item>
      <title>docker</title>
      <link>https://arnocat.github.io/posts/docker/docker-dockerfile/</link>
      <pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/docker/docker-dockerfile/</guid>
      <description>DockerFile编写 参考 https://blog.csdn.net/AkiraNicky/article/details/85775076 Docker官方网址: https://docs.docker.com/ 英文地址 Docker中文网址: http://www.docker.org.cn/ 中文地址</description>
    </item>
    <item>
      <title>go-makefile</title>
      <link>https://arnocat.github.io/posts/go/go-makefile/</link>
      <pubDate>Thu, 18 Jul 2024 16:44:54 +0800</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-makefile/</guid>
      <description>Using Makefile for Go - Go语言项目如何正确使用Makefile 我们一直在用Go语言编写的HackerRank项目中的一个项目使用make作为构建工具，并</description>
    </item>
    <item>
      <title>go-test</title>
      <link>https://arnocat.github.io/posts/go/go-test/</link>
      <pubDate>Thu, 18 Jul 2024 14:44:54 +0800</pubDate>
      <guid>https://arnocat.github.io/posts/go/go-test/</guid>
      <description>go基础之Testify单元测试 1. 简单使用 package main import ( &amp;#34;testing&amp;#34; &amp;#34;github.com/stretchr/testify/assert&amp;#34; ) func TestSomething(t *testing.T) { // assert equality assert.Equal(t, 123, 123, &amp;#34;they should be equal&amp;#34;) // assert inequality assert.NotEqual(t, 123, 456, &amp;#34;they should not be equal&amp;#34;) // assert for nil (good for errors) assert.Nil(t, object) // assert for not nil (good when you</description>
    </item>
    <item>
      <title>新建一个hugo博客</title>
      <link>https://arnocat.github.io/posts/blog/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAhugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/blog/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAhugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>Introduction 从零开始创建一个hugo项目并且部署到github 环境要求： 下载go 和 git 创建github库 打开github，创建一个库 输入项目名，要与 Github 用</description>
    </item>
  </channel>
</rss>
