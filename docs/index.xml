<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello Word NG</title>
    <link>https://arnocat.github.io/</link>
    <description>Recent content on Hello Word NG</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 08 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://arnocat.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker-proto</title>
      <link>https://arnocat.github.io/posts/creating-docker-proto-image/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/creating-docker-proto-image/</guid>
      <description>用go Makefile make -&amp;gt; docker image 生成proto （容器化用法） 为什么使用Makefile 在学习docker命令的时候，发现有人使用Makefile来存储操作，叼爆了。&#xA;因为最开始一个字一个字敲，因为这样会记住命令。但是熟悉了之后，每次想要做一些操作的时候就不得不 重复的输入以前的命令。当切换一个项目之后，又重复输入类似但又不完全相同的命令，仅仅通过history命令加速也比较慢。&#xA;先看实战Makefile示例 编译多个语种的proto文件 .PHONY: compile go java BUILDER_CONTAINER=namely/protoc-all:1.51_2 compile: java go go: docker run --rm -t -w /proto \ -v ${PWD}:/proto ${BUILDER_CONTAINER} \ -l go -o . -d proto java: docker run --rm -t -w /proto \ -v ${PWD}:/proto ${BUILDER_CONTAINER} \ -l java -o java/ -d proto Makefile是什么 Makefile是make命令的规则配置文件。make命令是什么？&#xA;先来看看make在哪里&#xA;$ whereis make make: /usr/bin/make /Library/Developer/CommandLineTools/usr/share/man/man1/make.1 可以看到make是bin下的以可执行文件。&#xA;make 用户手册 MAKE(1) User Commands MAKE(1) NAME make - GNU make utility to maintain groups of programs SYNOPSIS make [OPTION].</description>
    </item>
    <item>
      <title>docker</title>
      <link>https://arnocat.github.io/posts/creating-docker/</link>
      <pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/creating-docker/</guid>
      <description>docker </description>
    </item>
    <item>
      <title>Creating a New Theme</title>
      <link>https://arnocat.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&#xA;We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://arnocat.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like&#xA;▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become&#xA;▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    <item>
      <title>新建一个hugo博客</title>
      <link>https://arnocat.github.io/posts/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAhugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAhugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>Introduction 从零开始创建一个hugo项目并且部署到github&#xA;环境要求： 下载go 和 git&#xA;创建github库 打开github，创建一个库 输入项目名，要与 Github 用户名一致。比如我的是 arnocat，那么输入的 Repository name 就是 arnocat.github.io，README 不要勾选上。 setting页面选择main / docs文件夹，然后save 多账号github搭建 （此处自选） $ ssh-keygen -t rsa -b 4096 -C &amp;#34;your_email@example.com&amp;#34; Generating public/private rsa key pair. Enter file in which to save the key (~/.ssh/id_rsa):&amp;lt;为了区分多个key，请填写自定义的名称&amp;gt; $ vim ~/.ssh/config Host github.com Hostname ssh.github.com Port 443 User git IdentityFile ~/.ssh/id_rsa Host github.com-work HostName ssh.github.com Port 443 User git IdentityFile ~/.ssh/id_rsa_work $ ssh-add ~/.ssh/id_rsa ssh-add ~/.</description>
    </item>
    <item>
      <title>Création d&#39;un nouveau thème</title>
      <link>https://arnocat.github.io/posts/creation-dun-nouveau-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/creation-dun-nouveau-theme/</guid>
      <description>Introduction Ce tutoriel vous montrera comment créer un thème simple pour Hugo. Je suppose que vous êtes familier avec HTML, la ligne de commande bash, et que vous êtes à l&amp;rsquo;aise avec Markdown pour formater le contenu. Je vais expliquer comment Hugo utilise des modèles et comment vous pouvez organiser vos modèles pour créer un thème. Je ne couvrirai pas l&amp;rsquo;utilisation de CSS pour styliser votre thème.&#xA;Nous allons commencer par créer un nouveau site avec un modèle très basique.</description>
    </item>
    <item>
      <title>About</title>
      <link>https://arnocat.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/about/</guid>
      <description>Hugo is the world’s fastest framework for building websites. It is written in Go.&#xA;It makes use of a variety of open source projects including:&#xA;https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Learn more and contribute on GitHub.</description>
    </item>
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://arnocat.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.&#xA;This document is a brief primer on using Go templates.</description>
    </item>
    <item>
      <title>Débuter avec Hugo</title>
      <link>https://arnocat.github.io/posts/debuter-avec-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/debuter-avec-hugo/</guid>
      <description>&lt;h2 id=&#34;étape-1-installer-hugo&#34;&gt;Étape 1. Installer Hugo&lt;/h2&gt;&#xA;&lt;p&gt;Allez sur la page de téléchargements de&#xA;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo&lt;/a&gt; et téléchargez la version&#xA;appropriée à votre système d&amp;rsquo;exploitation et votre architecture.&lt;/p&gt;&#xA;&lt;p&gt;Sauvegardez le fichier téléchargé à un endroit précis, afin de l&amp;rsquo;utiliser dans&#xA;l&amp;rsquo;étape suivante.&lt;/p&gt;&#xA;&lt;p&gt;Des informations plus complètes sont disponibles sur la page&#xA;&lt;a href=&#34;https://arnocat.github.io/overview/installing/&#34;&gt;installing hugo&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://arnocat.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.&#xA;Save it somewhere specific as we will be using it in the next step.&#xA;More complete instructions are available at Install Hugo&#xA;Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.&#xA;Follow the following steps:&#xA;Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description>
    </item>
    <item>
      <title>Introduction aux modèles (Hu)go</title>
      <link>https://arnocat.github.io/posts/introduction-aux-modeles-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/introduction-aux-modeles-hugo/</guid>
      <description>Hugo utilise l&amp;rsquo;excellente librairie go html/template pour son moteur de modèles. c&amp;rsquo;est un moteur extrêmement léger qui offre un très petit nombre de fonctions logiques. À notre expérience, c&amp;rsquo;est juste ce qu&amp;rsquo;il faut pour créer un bon site web statique. Si vous avez déjà utilisé d&amp;rsquo;autre moteurs de modèles pour différents langages ou frameworks, vous allez retrouver beaucoup de similitudes avec les modèles go.&#xA;Ce document est une introduction sur l&amp;rsquo;utilisation de Go templates.</description>
    </item>
    <item>
      <title>Migrer vers Hugo depuis Jekyll</title>
      <link>https://arnocat.github.io/posts/migrer-vers-hugo-depuis-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://arnocat.github.io/posts/migrer-vers-hugo-depuis-jekyll/</guid>
      <description>&lt;h2 id=&#34;déplacez-le-contenu-statique-vers-static&#34;&gt;Déplacez le contenu statique vers &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Jekyll a une règle comme quoi tout répertoire qui ne commence pas par &lt;code&gt;_&lt;/code&gt; sera&#xA;copié tel-quel dans le répertoire &lt;code&gt;_site&lt;/code&gt;. Hugo garde tout le contenu statique&#xA;dans le répertoire &lt;code&gt;static&lt;/code&gt;. Vous devez donc déplacer tout ce type de contenu&#xA;là-dedans. Avec Jekylll, l&amp;rsquo;arborescence ressemblant à ceci :&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/&#xA;    ▾ images/&#xA;        logo.png&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
